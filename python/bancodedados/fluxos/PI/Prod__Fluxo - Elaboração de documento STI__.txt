<?xml version="1.0" encoding="iso-8859-1"?><process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="Fluxo - Elaboração de documento STI">
    <description><![CDATA[Versão 08 2017.]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Unidade de Infraestrutura">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('24124:5948,24124:5950,24124:5483')}"/>
    </swimlane>
    <swimlane name="Secretaria de Tecnologia da Informação">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('24123:5849,24123:5197,24123:5992')}"/>
    </swimlane>
    <swimlane name="Unidade de Sistemas Eleitorais">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('24126:5948,24126:5950,24126:5483')}"/>
    </swimlane>
    <swimlane name="Unidade de Sistemas Corporativos">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('24125:5948,24125:5950,24125:5483')}"/>
    </swimlane>
    <swimlane name="Nó de Desvio - Fluxo - Elaboração de documento STI">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('84:1')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" priority="3"/>
        <transition name="Apagar variável de fluxo" to="Apagar variável de fluxo"/>
    </start-state>  
    <!-- NODES -->
    <node name="Apagar variável de fluxo">
        <transition name="Testar encaminhar a SJD" to="Testar encaminhar a SJD"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:elaborarDocumentoSTI:cancelada')}" name="upd"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:elaborarDocumentoSTI:ciencia')}" name="upd"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:editorTexto:minutaEditorAssinatura')}" name="upd"/>
        </event>
    </node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('pje:fluxo:encaminharSJD') ? 'T1' : 'T2'}" name="Testar encaminhar a SJD">
        <transition name="T1" to="Término"/>
        <transition name="T2" to="Lançar movimento recebido"/>
    </decision>
    <node name="Lançar movimento recebido">
        <transition name="Realizar triagem do processo - STI" to="Realizar triagem do processo - STI"/>
        <event type="node-leave">
            <action expression="#{preencherMovimento.deCodigo(60055).lancarMovimento()}" name="upd"/>
        </event>
    </node>
    <task-node end-tasks="true" name="Realizar triagem do processo - STI">
        <task name="Realizar triagem do processo - STI" priority="3" swimlane="Secretaria de Tecnologia da Informação">
            <controller>
                <variable access="read,write" mapped-name="movimentarLote:movimento_lote" name="movimento_lote"/>
            </controller>
        </task>
        <transition name="Nó de Desvio - Fluxo - Elaboração de documento STI" to="Nó de Desvio - Fluxo - Elaboração de documento STI">
            <condition expression="#{true}"/>
        </transition>
        <transition name="Elaborar documento" to="Elaborar Documento - STI"/>
        <transition name="Remeter à Unidade de Sistemas Eleitorais" to="Elaborar Documento - Sistemas Eleitorais"/>
        <transition name="Remeter à Unidade de Sistemas Corporativos" to="Elaborar Documento - Sistemas Corporativos"/>
        <transition name="Remeter à Unidade de Infraestrutura" to="Elaborar Documento - Infraestrutura"/>
        <transition name="Remeter Processo à Unidade Solicitante" to="Término"/>
    </task-node>
    <task-node end-tasks="true" name="Analisar Processo - STI">
        <task name="Analisar Processo - STI" priority="3" swimlane="Secretaria de Tecnologia da Informação">
            <controller>
                <variable access="read" mapped-name="movimentarLote:movimento_lote" name="movimento_lote"/>
            </controller>
        </task>
        <transition name="Testar encaminhar a SJD" to="Nó de Desvio - Fluxo - Elaboração de documento STI">
            <condition expression="#{true}"/>
        </transition>
        <transition name="Elaborar documento" to="Elaborar Documento - STI"/>
        <transition name="Remeter à Unidade de Sistemas Eleitorais" to="Elaborar Documento - Sistemas Eleitorais"/>
        <transition name="Remeter à Unidade de Sistemas Corporativos" to="Elaborar Documento - Sistemas Corporativos"/>
        <transition name="Remeter à Unidade de Infraestrutura" to="Elaborar Documento - Infraestrutura"/>
        <transition name="Remeter ao Gabinete do Relator" to="lançar movimentação de conclusão">
            <condition expression="#{(tramitacaoProcessualService.recuperaVariavel('pje:fluxo:existeFluxoGabinete') == false) || (tramitacaoProcessualService.recuperaVariavel('pje:fluxo:existeFluxoGabinete') == null)}"/>
        </transition>
        <transition name="Remeter Processo à Unidade Solicitante" to="Término"/>
        <transition name="Remeter à Diretor Geral" to="Encaminhar DG"/>
        <transition name="Remeter à SJD" to="Gravar variável remeter a SJD">
            <condition expression="#{(tramitacaoProcessualService.recuperaVariavel('pje:fluxo:existeFluxoGabinete') == false) || (tramitacaoProcessualService.recuperaVariavel('pje:fluxo:existeFluxoGabinete') == null)}"/>
        </transition>
        <transition name="Remeter à SGP" to="Encaminhar a SGP"/>
        <transition name="Remeter à SAD" to="Encaminhar a SAD"/>
    </task-node>
    <node name="Gravar variável remeter a SJD">
        <transition name="Término" to="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:encaminharSJD',true)}" name="upd"/>
        </event>
    </node>
    <node name="lançar movimentação de conclusão">
        <transition name="Remeter ao Gabinete" to="Remeter ao Gabinete"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(51).comComplementoDeCodigo(3).doTipoDominio().preencherComElementoDeCodigo(6).lancarMovimento()}" name="upd"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:cargoDestino')}" name="upd"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:orgaoDestino')}" name="upd"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:colegiadoDestino')}" name="upd"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:substituicao:substituindo')}" name="upd"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:orgaoPresidente')}" name="upd"/>
        </event>
    </node>
    <process-state name="Remeter ao Gabinete">
        <sub-process binding="late" name="Fluxo - Gabinetes"/>
        <transition name="Término" to="Término"/>
    </process-state>
    <process-state name="Encaminhar DG">
        <sub-process binding="late" name="Fluxo - Elaboração de documento DG"/>
        <transition name="Testar encaminhar a SJD" to="Testar encaminhar a SJD"/>
    </process-state>
    <process-state name="Encaminhar a SGP">
        <sub-process binding="late" name="Fluxo - Elaboração de documento SGP"/>
        <transition name="Testar encaminhar a SJD" to="Testar encaminhar a SJD"/>
    </process-state>
    <process-state name="Encaminhar a SAD">
        <sub-process binding="late" name="Fluxo - Elaboração de documento SAD"/>
        <transition name="Testar encaminhar a SJD" to="Testar encaminhar a SJD"/>
    </process-state>
    <task-node end-tasks="true" name="Elaborar Documento - STI">
        <task name="Elaborar Documento - STI" priority="4" swimlane="Secretaria de Tecnologia da Informação">
            <controller>
                <variable access="read,write" mapped-name="frame:Processo_Fluxo_editorTexto" name="Processo_Fluxo_editorTexto"/>
                <variable access="read,write" mapped-name="assinarLote:assina_lote" name="assina_lote"/>
            </controller>
        </task>
        <transition name="Nó de Desvio - Fluxo - Elaboração de documento STI" to="Nó de Desvio - Fluxo - Elaboração de documento STI">
            <condition expression="#{true}"/>
        </transition>
        <transition name="Retornar triagem do processo" to="Realizar triagem do processo - STI"/>
        <transition name="Prosseguir" to="Lançar movimento de juntada STI">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-start">
            <action expression="#{atividadesLoteService.setTipoDocumentoAssinarLote('112,103,211')}" name="upd"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:paj:cancelada',false)}" name="upd"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos','Retornar triagem do processo')}" name="upd"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:editorTexto:minutaEditorAssinatura')}" name="upd"/>
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Prosseguir')}" name="upd"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','112,103,211,119')}" name="upd"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}" name="upd"/>
        </event>
    </task-node>
    <node name="Lançar movimento de juntada STI">
        <transition name="Analisar Processo - STI" to="Analisar Processo - STI"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(581).comComplementoDeCodigo(4).preencherComTexto('Outros Documentos').lancarMovimento()}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="Elaborar Documento - Sistemas Eleitorais">
        <task name="Elaborar Documento - Sistemas Eleitorais" priority="3" swimlane="Unidade de Sistemas Eleitorais">
            <controller>
                <variable access="read,write" mapped-name="assinarLote:assina_lote" name="assina_lote"/>
                <variable access="read,write" mapped-name="frame:Processo_Fluxo_editorTexto" name="Processo_Fluxo_editorTexto"/>
            </controller>
        </task>
        <transition name="Nó de Desvio - Fluxo - Elaboração de documento STI" to="Nó de Desvio - Fluxo - Elaboração de documento STI">
            <condition expression="#{true}"/>
        </transition>
        <transition name="Retornar à STI" to="Realizar triagem do processo - STI"/>
        <transition name="Prosseguir" to="Lançar movimento de juntada Sistemas Eleitorais">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-start">
            <action expression="#{atividadesLoteService.setTipoDocumentoAssinarLote('112,103,211,119')}" name="upd"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:paj:cancelada',false)}" name="upd"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos','Retornar à STI')}" name="upd"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:editorTexto:minutaEditorAssinatura')}" name="upd"/>
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Prosseguir')}" name="upd"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','112,103,211,119')}" name="upd"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}" name="upd"/>
        </event>
    </task-node>
    <node name="Lançar movimento de juntada Sistemas Eleitorais">
        <transition name="Analisar Processo - Sistemas Eleitorais" to="Analisar Processo - Sistemas Eleitorais"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(581).comComplementoDeCodigo(4).preencherComTexto('Outros Documentos').lancarMovimento()}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="Analisar Processo - Sistemas Eleitorais">
        <task name="Analisar Processo - Sistemas Eleitorais" priority="3" swimlane="Unidade de Sistemas Eleitorais">
            <controller>
                <variable access="read" mapped-name="movimentarLote:movimento_lote" name="movimento_lote"/>
            </controller>
        </task>
        <transition name="Nó de Desvio - Fluxo - Elaboração de documento STI" to="Nó de Desvio - Fluxo - Elaboração de documento STI">
            <condition expression="#{true}"/>
        </transition>
        <transition name="Elaborar Documento" to="Elaborar Documento - Sistemas Eleitorais"/>
        <transition name="Remeter à Unidade de Sistemas Corporativos" to="Elaborar Documento - Sistemas Corporativos"/>
        <transition name="Remeter à Unidade de Infraestrutura" to="Elaborar Documento - Infraestrutura"/>
        <transition name="Remeter à STI" to="Analisar Processo - STI"/>
    </task-node>
    <task-node end-tasks="true" name="Elaborar Documento - Sistemas Corporativos">
        <task name="Elaborar Documento - Sistemas Corporativos" priority="3" swimlane="Unidade de Sistemas Corporativos">
            <controller>
                <variable access="read,write" mapped-name="assinarLote:assina_lote" name="assina_lote"/>
                <variable access="read,write" mapped-name="frame:Processo_Fluxo_editorTexto" name="Processo_Fluxo_editorTexto"/>
            </controller>
        </task>
        <transition name="Nó de Desvio - Fluxo - Elaboração de documento STI" to="Nó de Desvio - Fluxo - Elaboração de documento STI">
            <condition expression="#{true}"/>
        </transition>
        <transition name="Retornar à STI" to="Realizar triagem do processo - STI"/>
        <transition name="Prosseguir" to="Lançar movimento de juntada Sistemas Corporativos">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-start">
            <action expression="#{atividadesLoteService.setTipoDocumentoAssinarLote('112,103,211,119')}" name="upd"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:paj:cancelada',false)}" name="upd"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos','Retornar à STI')}" name="upd"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:editorTexto:minutaEditorAssinatura')}" name="upd"/>
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Prosseguir')}" name="upd"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','112,103,211,119')}" name="upd"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}" name="upd"/>
        </event>
    </task-node>
    <node name="Lançar movimento de juntada Sistemas Corporativos">
        <transition name="Analisar Processo - Sistemas Corporativos" to="Analisar Processo - Sistemas Corporativos"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(581).comComplementoDeCodigo(4).preencherComTexto('Outros Documentos').lancarMovimento()}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="Analisar Processo - Sistemas Corporativos">
        <task name="Analisar Processo - Sistemas Corporativos" priority="3" swimlane="Unidade de Sistemas Corporativos">
            <controller>
                <variable access="read" mapped-name="movimentarLote:movimento_lote" name="movimento_lote"/>
            </controller>
        </task>
        <transition name="Nó de Desvio - Fluxo - Elaboração de documento STI" to="Nó de Desvio - Fluxo - Elaboração de documento STI">
            <condition expression="#{true}"/>
        </transition>
        <transition name="Elaborar Documento" to="Elaborar Documento - Sistemas Corporativos"/>
        <transition name="Remeter à Unidade de Sistemas Eleitorais" to="Elaborar Documento - Sistemas Eleitorais"/>
        <transition name="Remeter à Unidade de Infraestrutura" to="Elaborar Documento - Infraestrutura"/>
        <transition name="Remeter à STI" to="Analisar Processo - STI"/>
    </task-node>
    <task-node end-tasks="true" name="Elaborar Documento - Infraestrutura">
        <task name="Elaborar Documento - Infraestrutura" priority="3" swimlane="Unidade de Infraestrutura">
            <controller>
                <variable access="read,write" mapped-name="assinarLote:assina_lote" name="assina_lote"/>
                <variable access="read,write" mapped-name="frame:Processo_Fluxo_editorTexto" name="Processo_Fluxo_editorTexto"/>
            </controller>
        </task>
        <transition name="Nó de Desvio - Fluxo - Elaboração de documento STI" to="Nó de Desvio - Fluxo - Elaboração de documento STI">
            <condition expression="#{true}"/>
        </transition>
        <transition name="Retornar à STI" to="Realizar triagem do processo - STI"/>
        <transition name="Prosseguir" to="Lançar movimento de juntada Infraestrutura">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-start">
            <action expression="#{atividadesLoteService.setTipoDocumentoAssinarLote('112,103,211,119')}" name="upd"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:paj:cancelada',false)}" name="upd"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos','Retornar à STI')}" name="upd"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:editorTexto:minutaEditorAssinatura')}" name="upd"/>
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Prosseguir')}" name="upd"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','112,103,211,119')}" name="upd"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}" name="upd"/>
        </event>
    </task-node>
    <node name="Lançar movimento de juntada Infraestrutura">
        <transition name="Analisar Processo - Infraestrutura" to="Analisar Processo - Infraestrutura"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(581).comComplementoDeCodigo(4).preencherComTexto('Outros Documentos').lancarMovimento()}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="Analisar Processo - Infraestrutura">
        <task name="Analisar Processo - Infraestrutura" priority="3" swimlane="Unidade de Infraestrutura">
            <controller>
                <variable access="read" mapped-name="movimentarLote:movimento_lote" name="movimento_lote"/>
            </controller>
        </task>
        <transition name="Nó de Desvio - Fluxo - Elaboração de documento STI" to="Nó de Desvio - Fluxo - Elaboração de documento STI">
            <condition expression="#{true}"/>
        </transition>
        <transition name="Elaborar Documento" to="Elaborar Documento - Infraestrutura"/>
        <transition name="Remeter à Unidade de Sistemas Eleitorais" to="Elaborar Documento - Sistemas Eleitorais"/>
        <transition name="Remeter à Unidade de Sistemas Corporativos" to="Elaborar Documento - Sistemas Corporativos"/>
        <transition name="Remeter à STI" to="Analisar Processo - STI"/>
    </task-node>
    <node name="Gravar variável cancelamento fluxo">
        <transition name="Término" to="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:elaborarDocumentoSTI:cancelada',true)}" name="upd"/>
        </event>
    </node>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - Fluxo - Elaboração de documento STI">
        <task name="Nó de Desvio - Fluxo - Elaboração de documento STI" priority="3" swimlane="Nó de Desvio - Fluxo - Elaboração de documento STI"/>
        <transition name="Término" to="Término"/>
        <transition name="Realizar triagem do processo - STI" to="Realizar triagem do processo - STI"/>
        <transition name="Elaborar Documento - Sistemas Eleitorais" to="Elaborar Documento - Sistemas Eleitorais"/>
        <transition name="Elaborar Documento - STI" to="Elaborar Documento - STI"/>
        <transition name="Analisar Processo - STI" to="Analisar Processo - STI"/>
        <transition name="Analisar Processo - Sistemas Eleitorais" to="Analisar Processo - Sistemas Eleitorais"/>
        <transition name="Elaborar Documento - Sistemas Corporativos" to="Elaborar Documento - Sistemas Corporativos"/>
        <transition name="Analisar Processo - Sistemas Corporativos" to="Analisar Processo - Sistemas Corporativos"/>
        <transition name="Elaborar Documento - Infraestrutura" to="Elaborar Documento - Infraestrutura"/>
        <transition name="Analisar Processo - Infraestrutura" to="Analisar Processo - Infraestrutura"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
